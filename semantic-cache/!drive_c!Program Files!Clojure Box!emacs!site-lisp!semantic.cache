;; Object site-lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "site-lisp/"
  :tables (list 
   (semanticdb-table "site-start.el"
    :major-mode 'emacs-lisp-mode
    :tags nil
    :file "site-start.el"
    :pointmax 1177
    :fsize 1205
    :lastmodtime '(18803 36668)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "default.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("cd" code nil nil [94 102])
            ("add-hook" code nil nil [260 354])
            ("iswitchb" include nil nil [431 450])
            ("iswitchb-mode" code nil nil [451 468])
            ("clojure-home" variable (:default-value (concat (file-name-directory load-file-name) "../../")) nil [493 569])
            ("add-to-list" code nil nil [570 632])
            ("clojure-mode" include nil nil [633 656])
            ("add-to-list" code nil nil [676 739])
            ("swank-clojure-autoload" include nil nil [740 773])
            ("swank-clojure-config" code nil nil [774 1132])
            ("add-to-list" code nil nil [1133 1192])
            ("slime" include nil nil [1193 1209])
            ("slime" code nil nil [1210 1217]))          
    :file "default.el"
    :pointmax 1218
    :fsize 1252
    :lastmodtime '(18949 53766)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "paredit.el"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("paredit-version" variable
               (:constant-flag t
                :default-value 21)
                nil [8842 8871])
            ("paredit-beta-p" variable (:constant-flag t) nil [8872 8901])
            ("paredit-xemacs-p" function nil nil [8925 9169])
            ("paredit-gnu-emacs-p" function nil nil [9173 9273])
            ("xcond" function (:arguments ("&rest" "clauses")) nil [9277 9429])
            ("defalias" code nil nil [9433 9493])
            ("paredit-sexp-error-type" variable (:default-value (with-temp-buffer (insert "(") (condition-case condition (backward-sexp) (error (if (eq (car condition) (quote error)) (paredit-warn "%s%s%s%s%s" "Paredit is unable to discriminate" " S-expression parse errors from" " other errors. " " This may cause obscure problems. " " Please upgrade Emacs.")) (car condition))))) nil [9497 10072])
            ("paredit-handle-sexp-errors" function (:arguments ("body" "&rest" "handler")) nil [10076 10218])
            ("put" code nil nil [10222 10279])
            ("paredit-ignore-sexp-errors" function (:arguments ("&rest" "body")) nil [10283 10393])
            ("put" code nil nil [10397 10454])
            ("paredit-mode-map" variable (:default-value (make-sparse-keymap)) nil [10493 10578])
            ("define-minor-mode" code nil nil [10580 11496])
            ("enable-paredit-mode" function (:user-visible-flag t) nil [11569 11728])
            ("disable-paredit-mode" function (:user-visible-flag t) nil [11730 11891])
            ("paredit-backward-delete-key" variable (:default-value (xcond ((paredit-xemacs-p) "BS") ((paredit-gnu-emacs-p) "DEL"))) nil [11893 12007])
            ("paredit-forward-delete-keys" variable (:default-value (xcond ((paredit-xemacs-p) (quote ("DEL"))) ((paredit-gnu-emacs-p) (quote ("<delete>" "<deletechar>"))))) nil [12009 12150])
            ("paredit-commands" variable nil nil [12349 12437])
            ("progn" code nil nil [12742 19849])
            ("paredit-do-commands" function (:arguments ("vars" "string-case" "&rest" "body")) nil [19939 20607])
            ("put" code nil nil [20611 20661])
            ("paredit-define-keys" function nil nil [20664 20856])
            ("paredit-function-documentation" function (:arguments ("fn")) nil [20858 21126])
            ("paredit-annotate-mode-with-examples" function nil nil [21128 22334])
            ("paredit-annotate-functions-with-examples" function nil nil [22336 23006])
            ("paredit-insert-html-examples" function (:user-visible-flag t) nil [23030 25063])
            ("paredit-html-quote" function (:arguments ("string")) nil [25065 25461])
            ("paredit-conc-name" function (:arguments ("&rest" "strings")) nil [25510 25588])
            ("define-paredit-pair" function (:arguments ("open" "close" "name")) nil [25592 27645])
            ("paredit-wrap-commands" variable (:default-value (quote (paredit-wrap-sexp))) nil [27648 27812])
            ("define-paredit-pair" code nil nil [27814 27851])
            ("define-paredit-pair" code nil nil [27852 27890])
            ("define-paredit-pair" code nil nil [27891 27928])
            ("define-paredit-pair" code nil nil [27929 27967])
            ("defalias" code nil nil [28001 28057])
            ("defalias" code nil nil [28058 28116])
            ("defalias" code nil nil [28117 28201])
            ("defalias" code nil nil [28203 28256])
            ("defalias" code nil nil [28257 28312])
            ("defalias" code nil nil [28313 28394])
            ("paredit-move-past-close" function (:arguments ("close")) nil [28397 28665])
            ("paredit-move-past-close-and-newline" function (:arguments ("close")) nil [28667 29271])
            ("paredit-find-comment-on-line" function nil nil [29273 30291])
            ("paredit-insert-pair" function (:arguments ("n" "open" "close" "forward")) nil [30294 31114])
            ("paredit-region-safe-for-insert-p" function nil nil [31116 31872])
            ("paredit-space-for-delimiter-p" function (:arguments ("endp" "delimiter")) nil [31887 32452])
            ("paredit-move-past-close-and-reindent" function (:arguments ("close")) nil [32455 34121])
            ("paredit-missing-close" function nil nil [34123 34368])
            ("paredit-delete-leading-whitespace" function nil nil [34370 34849])
            ("paredit-blink-paren-match" function (:arguments ("another-line-p")) nil [34851 35269])
            ("paredit-doublequote" function
               (:user-visible-flag t
                :arguments ("&optional" "n"))
                nil [35272 36453])
            ("paredit-meta-doublequote" function
               (:user-visible-flag t
                :arguments ("&optional" "n"))
                nil [36455 37168])
            ("paredit-forward-for-quote" function (:arguments ("end")) nil [37170 38629])
            ("paredit-backslash" function (:user-visible-flag t) nil [38655 39568])
            ("paredit-escape" function (:arguments ("char")) nil [39681 40064])
            ("paredit-newline" function (:user-visible-flag t) nil [40259 40934])
            ("paredit-reindent-defun" function
               (:user-visible-flag t
                :arguments ("&optional" "argument"))
                nil [40936 41341])
            ("paredit-comment-dwim" function
               (:user-visible-flag t
                :arguments ("&optional" "argument"))
                nil [41368 42835])
            ("paredit-initialize-comment-dwim" function nil nil [42965 43614])
            ("paredit-comment-on-line-p" function nil nil [43617 44240])
            ("paredit-insert-comment" function nil nil [44242 45849])
            ("paredit-forward-delete" function
               (:user-visible-flag t
                :arguments ("&optional" "argument"))
                nil [45877 48093])
            ("paredit-forward-delete-in-string" function nil nil [48095 49274])
            ("paredit-backward-delete" function
               (:user-visible-flag t
                :arguments ("&optional" "argument"))
                nil [49277 51336])
            ("paredit-backward-delete-in-string" function nil nil [51338 52471])
            ("paredit-kill" function
               (:user-visible-flag t
                :arguments ("&optional" "argument"))
                nil [52488 53472])
            ("paredit-kill-line-in-string" function nil nil [53474 54057])
            ("paredit-kill-sexps-on-line" function nil nil [54059 55337])
            ("paredit-forward-sexps-to-kill" function (:arguments ("beginning" "eol")) nil [55512 56898])
            ("paredit-kill-sexps-on-whole-line" function (:arguments ("beginning")) nil [56900 58229])
            ("paredit-forward-kill-word" function (:user-visible-flag t) nil [58438 59681])
            ("paredit-backward-kill-word" function (:user-visible-flag t) nil [59683 60838])
            ("paredit-kill-word-state" function (:arguments ("parse-state" "adjacent-char-fn")) nil [60874 61168])
            ("paredit-kill-word-hack" function (:arguments ("old-state" "new-state" "parse-state")) nil [61427 62290])
            ("defun-saving-mark" function (:arguments ("name" "bvl" "doc" "&rest" "body")) nil [62346 62592])
            ("defun-saving-mark" code nil nil [62595 63054])
            ("defun-saving-mark" code nil nil [63056 63478])
            ("backward-down-list" function
               (:user-visible-flag t
                :arguments ("&optional" "arg"))
                nil [63513 63766])
            ("paredit-recentre-on-sexp" function
               (:user-visible-flag t
                :arguments ("&optional" "n"))
                nil [63838 64368])
            ("paredit-focus-on-defun" function (:user-visible-flag t) nil [64370 64514])
            ("paredit-wrap-sexp" function
               (:user-visible-flag t
                :arguments ("&optional" "argument" "open" "close"))
                nil [64579 65699])
            ("paredit-count-sexps-forward" function nil nil [65701 65900])
            ("paredit-yank-pop" function
               (:user-visible-flag t
                :arguments ("&optional" "argument"))
                nil [65902 67235])
            ("paredit-splice-sexp" function
               (:user-visible-flag t
                :arguments ("&optional" "argument"))
                nil [67541 68884])
            ("paredit-kill-surrounding-sexps-for-splice" function (:arguments ("argument")) nil [68928 70478])
            ("paredit-splice-sexp-killing-backward" function
               (:user-visible-flag t
                :arguments ("&optional" "n"))
                nil [70481 70877])
            ("paredit-splice-sexp-killing-forward" function
               (:user-visible-flag t
                :arguments ("&optional" "n"))
                nil [70879 71278])
            ("paredit-raise-sexp" function
               (:user-visible-flag t
                :arguments ("&optional" "n"))
                nil [71280 72408])
            ("paredit-convolute-sexp" function
               (:user-visible-flag t
                :arguments ("&optional" "n"))
                nil [72410 73501])
            ("paredit-splice-string" function (:arguments ("argument")) nil [73504 74694])
            ("paredit-unescape-string" function (:arguments ("string")) nil [74696 75072])
            ("paredit-forward-slurp-sexp" function (:user-visible-flag t) nil [75100 75829])
            ("paredit-forward-slurp-into-list" function nil nil [75831 76621])
            ("paredit-forward-slurp-into-string" function nil nil [76670 77055])
            ("paredit-forward-barf-sexp" function (:user-visible-flag t) nil [77057 78114])
            ("paredit-backward-slurp-sexp" function (:user-visible-flag t) nil [78117 78835])
            ("paredit-backward-slurp-into-list" function nil nil [78837 79441])
            ("paredit-backward-slurp-into-string" function nil nil [79443 79856])
            ("paredit-backward-barf-sexp" function (:user-visible-flag t) nil [79858 80760])
            ("paredit-split-sexp" function (:user-visible-flag t) nil [80789 81584])
            ("paredit-join-sexps" function (:user-visible-flag t) nil [81586 83507])
            ("paredit-add-to-previous-list" function (:user-visible-flag t) nil [83612 83876])
            ("paredit-add-to-next-list" function (:user-visible-flag t) nil [83878 84194])
            ("paredit-join-with-previous-list" function (:user-visible-flag t) nil [84196 84560])
            ("paredit-join-with-next-list" function (:user-visible-flag t) nil [84562 84904])
            ("paredit-in-string-escape-p" function nil nil [84923 85313])
            ("paredit-in-char-p" function (:arguments ("&optional" "argument")) nil [85315 85964])
            ("paredit-forward-and-indent" function nil nil [85966 86399])
            ("paredit-skip-whitespace" function (:arguments ("trailing-p" "&optional" "limit")) nil [86441 86811])
            ("defalias" code nil nil [86863 87051])
            ("paredit-hack-kill-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [87053 87681])
            ("paredit-current-parse-state" function nil nil [88034 88393])
            ("paredit-in-string-p" function (:arguments ("&optional" "state")) nil [88395 88738])
            ("paredit-string-start+end-points" function (:arguments ("&optional" "state")) nil [88740 89360])
            ("paredit-in-comment-p" function (:arguments ("&optional" "state")) nil [89362 89740])
            ("paredit-point-at-sexp-boundary" function (:arguments ("n")) nil [89742 89905])
            ("paredit-point-at-sexp-start" function nil nil [89907 90015])
            ("paredit-point-at-sexp-end" function nil nil [90017 90123])
            ("paredit-lose-if-not-in-sexp" function (:arguments ("command")) nil [90125 90325])
            ("paredit-define-keys" code nil nil [90349 90370])
            ("paredit-annotate-mode-with-examples" code nil nil [90371 90408])
            ("paredit-annotate-functions-with-examples" code nil nil [90409 90451])
            ("paredit" package nil nil [90453 90471]))          
    :file "paredit.el"
    :pointmax 90472
    :fsize 90471
    :lastmodtime '(18872 28908)
    :unmatched-syntax '((close-paren 62592 . 62593) (symbol 62327 . 62343) (open-paren 62326 . 62327) (close-paren 27645 . 27646) (symbol 25491 . 25507) (open-paren 25490 . 25491) (close-paren 20661 . 20662) (symbol 19920 . 19936) (open-paren 19919 . 19920) (close-paren 10461 . 10462) (symbol 10458 . 10461) (symbol 8905 . 8921) (open-paren 8904 . 8905))
    )
   )
  :file "!drive_c!Program Files!Clojure Box!emacs!site-lisp!semantic.cache"
  :semantic-tag-version "2.0pre6"
  :semanticdb-version "2.0pre6"
  )
